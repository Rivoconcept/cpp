Écrivez une classe ScalarConverter qui contiendra une seule méthode statique nommée convert, laquelle prendra 
en paramètre une représentation sous forme de chaîne de caractères d un littéral C++ dans sa forme la plus courante,
 et affichera sa valeur dans les types scalaires suivants :

char

int

float

double

Comme cette classe n a pas besoin de stocker quoi que ce soit, elle ne doit pas être instanciable par les utilisateurs.

À l exception des paramètres de type char, seule la notation décimale sera utilisée.

Exemples de littéraux char : 'c', 'a', ...

Pour simplifier, veuillez noter que les caractères non affichables ne doivent pas être utilisés comme entrées.
 Si une conversion vers char donne un caractère non affichable, affichez un message informatif.

Exemples de littéraux int : 0, -42, 42, ...

Exemples de littéraux float : 0.0f, -4.2f, 4.2f, ...

Vous devez aussi gérer ces pseudo-littéraux (vous savez, pour la science) : -inff, +inff, et nanf.

Exemples de littéraux double : 0.0, -4.2, 4.2, ...

Vous devez également gérer ces pseudo-littéraux (vous savez, pour le fun) : -inf, +inf, et nan.

Écrivez un programme pour tester que votre classe fonctionne comme prévu.

Vous devez d abord détecter le type du littéral passé en paramètre, le convertir depuis une chaîne de caractères vers son type réel,
 puis le convertir explicitement vers les trois autres types de données. Enfin, affichez les résultats comme montré ci-dessous.

Si une conversion n a aucun sens ou dépasse les limites, affichez un message pour informer l utilisateur 
que la conversion de type est impossible. Incluez tout en-tête nécessaire pour gérer les limites numériques et les valeurs spéciales.

Exemples d exécution :


./convert 0
char: Non affichable
int: 0
float: 0.0f
double: 0.0

./convert nan
char: impossible
int: impossible
float: nanf
double: nan

./convert 42.0f
char: '*'
int: 42
float: 42.0f
double: 42.0