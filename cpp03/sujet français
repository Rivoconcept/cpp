D'abord, vous devez implémenter une classe ! Quelle originalité !
Elle s'appellera ClapTrap et aura les attributs privés suivants, initialisés aux valeurs spécifiées entre parenthèses :

Nom, qui est passé en paramètre au constructeur

Points de vie (10), représentant la santé du ClapTrap

Points d'énergie (10)

Dégâts d'attaque (0)

Ajoutez les fonctions membres publiques suivantes afin que le ClapTrap se comporte de manière plus réaliste :

void attack(const std::string& target);

void takeDamage(unsigned int amount);

void beRepaired(unsigned int amount);

Lorsqu'un ClapTrap attaque, il fait perdre <dégâts d'attaque> points de vie à sa cible.
Lorsqu'un ClapTrap se répare, il regagne <amount> points de vie.
Chaque attaque et réparation coûte 1 point d'énergie.
Bien entendu, ClapTrap ne peut rien faire s'il n'a plus de points de vie ou d'énergie.

Cependant, puisque cet exercice est une introduction, les instances de ClapTrap ne doivent pas interagir
 directement entre elles et les paramètres ne feront pas référence à une autre instance de ClapTrap.

Dans chacune de ces fonctions membres, vous devez afficher un message décrivant l'action effectuée. Par exemple,
 la fonction attack() pourrait afficher quelque chose comme ceci (bien sûr, sans les crochets) :

ClapTrap <nom> attaque <cible>, causant <dégâts> points de dégâts !
Le constructeur et le destructeur doivent également afficher un message afin que vos évaluateurs puissent facilement voir qu'ils ont été appelés.

Enfin, implémentez et soumettez vos propres tests pour vous assurer que votre code fonctionne comme prévu.

/*********************************************************************************************************************

Comme on n'a jamais assez de ClapTrap, vous allez maintenant créer un robot dérivé.
Il sera nommé ScavTrap et héritera des constructeurs et du destructeur de ClapTrap. Cependant, ses constructeurs, son destructeur et sa fonction attack() afficheront des messages différents.
Après tout, les ClapTrap sont conscients de leur individualité.
Notez qu'un enchaînement construction/destruction correct doit être démontré dans vos tests.
Lorsqu'un ScavTrap est créé, le programme commence par construire un ClapTrap. La destruction se déroule dans l'ordre inverse. Pourquoi ?
ScavTrap utilisera les attributs de ClapTrap (mettez à jour ClapTrap en conséquence) et
doit les initialiser à :
• Nom, passé en paramètre au constructeur
• Points de vie (100), représentant la santé du ClapTrap
• Points d'énergie (50)
• Dégâts d'attaque (20)
ScavTrap aura également sa propre capacité spéciale :
void guardGate(); Cette fonction membre affichera un message indiquant que ScavTrap est désormais en mode Gatekeeper.
N'oubliez pas d'ajouter d'autres tests à votre programme.

/******************************************************************************************************************************************/

Créer des ClapTraps commence probablement à te taper sur les nerfs.
À présent, implémente une classe FragTrap qui hérite de ClapTrap. Elle est très similaire à ScavTrap. Cependant, ses messages de construction et de destruction doivent être différents.

Tu dois montrer clairement l’enchaînement correct des constructions/destructions dans tes tests :

Lorsqu’un FragTrap est créé, le programme commence par construire un ClapTrap.

Lors de la destruction, cela se fait dans l’ordre inverse.

Les attributs sont également semblables, mais avec des valeurs différentes cette fois-ci :

Le nom, qui est passé en paramètre au constructeur

Les points de vie (Hit points) : 100

Les points d’énergie (Energy points) : 100

Les dégâts d’attaque (Attack damage) : 30

La classe FragTrap possède aussi une capacité spéciale :


void highFivesGuys(void);



Cette fonction-membre doit afficher une demande de "high-five" (tape m’en cinq) positive sur la sortie standard.

Encore une fois, ajoute davantage de tests à ton programme.

Si tu veux, je peux t’aider à écrire la classe FragTrap complète avec les bons messages de log et un test dans le main() pour illustrer tout ça. Tu veux que je te le fasse ?